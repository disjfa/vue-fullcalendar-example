{"version":3,"sources":["webpack:///./node_modules/@fullcalendar/timegrid/main.js","webpack:///./src/views/Advanced.vue?a96f","webpack:///./src/views/Advanced.vue?5302","webpack:///src/views/Advanced.vue","webpack:///./src/views/Advanced.vue?8df1","webpack:///./src/views/Advanced.vue"],"names":["global","factory","exports","__webpack_require__","this","core","daygrid","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","TimeGridEventRenderer","_super","timeGrid","_this","context","fullTimeFormat","createFormatter","hour","minute","separator","options","defaultRangeSeparator","attachSegs","segs","mirrorInfo","segsByCol","groupSegsByCol","col","sortEventSegs","attachSegsByCol","fgContainerEls","detachSegs","forEach","seg","removeElement","el","computeSegSizes","allSegs","_a","colCnt","computeSegVerticals","computeSegHorizontals","assignSegSizes","assignSegVerticals","assignSegCss","computeEventTimeFormat","meridiem","computeDisplayEventEnd","renderSegHtml","timeText","fullTimeText","startTimeText","eventRange","eventDef","def","eventUi","ui","allDay","isDraggable","startEditable","isResizableFromStart","isStart","durationEditable","eventResizableFromStart","isResizableFromEnd","isEnd","classes","getSegClasses","skinCss","cssToStr","getSkinCss","unshift","isMultiDayRange","range","unzonedStart","start","unzonedEnd","end","_getTimeText","getTimeText","join","url","htmlEscape","title","levels","level0","buildSlotSegLevels","computeForwardSlotSegs","computeSlotSegPressures","computeSegForwardBack","seriesBackwardPressure","seriesBackwardCoord","forwardSegs","undefined","forwardCoord","sortForwardSegs","backwardCoord","objs","map","buildTimeGridSegCompareObj","specs","field","order","concat","view","eventOrderSpecs","sort","obj0","obj1","compareByFieldSpecs","c","_seg","_i","segs_1","applyStyle","generateSegCss","level","classList","add","bottom","top","left","right","shouldOverlap","slotEventOverlap","props","generateSegVerticalCss","isRtl","Math","min","zIndex","forwardPressure","FgEventRenderer","j","computeSlotSegCollisions","push","k","forwardSeg","max","otherSegs","results","isSlotSegCollision","seg1","seg2","obj","buildSegCompareObj","TimeGridMirrorRenderer","mirrorContainerEls","sourceSeg","sourceSegProps","marginLeft","marginRight","TimeGridFillRenderer","type","containerEls","bgContainerEls","businessContainerEls","highlightContainerEls","FillRenderer","AGENDA_STOCK_SUB_DURATIONS","hours","minutes","seconds","TimeGrid","renderProps","isSlatSizesDirty","isColSizesDirty","renderSlats","memoizeRendering","_renderSlats","eventRenderer","fillRenderer","mirrorRenderer","renderColumns","_renderColumns","_unrenderColumns","renderBusinessHours","renderSegs","bind","unrender","renderDateSelection","_renderDateSelection","_unrenderDateSelection","renderFgEvents","renderBgEvents","renderEventSelection","selectByInstanceId","unselectByInstanceId","renderEventDrag","_renderEventDrag","_unrenderEventDrag","renderEventResize","_renderEventResize","_unrenderEventResize","processOptions","innerHTML","theme","getClass","rootBgContainerEl","querySelector","slatContainerEl","bottomRuleEl","snapsPerSlot","input","slotDuration","opt","snapDuration","createDuration","wholeDivideDurations","isArray","labelFormat","omitZeroMinute","labelInterval","computeLabelInterval","slotsPerLabel","render","cells","dateProfile","businessHourSegs","dateSelectionSegs","fgEventSegs","bgEventSegs","eventSelection","eventDrag","eventResize","destroy","updateSize","isResize","buildSlatPositions","buildColPositions","computeSizes","assignSizes","renderSlatRowHtml","slatEls","findElements","slatPositions","PositionCache","slotDate","isLabeled","axisHtml","dateEnv","html","dayStart","startOfDay","renderRange","slotTime","minTime","slotIterator","asRoughMs","maxTime","format","formatIsoTimeString","addDurations","bgRow","DayBgRow","renderHtml","renderIntroHtml","renderBgIntroHtml","colEls","reverse","colPositions","renderContentSkeleton","unrenderContentSkeleton","skeletonEl","parts","contentSkeletonEl","htmlToElement","colContainerEls","appendChild","getNowIndicatorUnit","renderNowIndicator","date","computeDateTop","nodes","lineEl","createElement","className","style","arrowEl","nowIndicatorEls","unrenderNowIndicator","getTotalSlatHeight","offsetHeight","when","startOfDayDate","computeTimeTop","valueOf","timeMs","slatIndex","slatRemainder","len","slatCoverage","floor","tops","getHeight","dayDate","eventMinHeight","build","positionToHit","positionLeft","positionTop","colIndex","leftToIndex","topToIndex","slatTop","slatHeight","partial","localSnapIndex","snapIndex","time","multiplyDuration","dateSpan","dayEl","relativeRect","lefts","rights","state","hideByHash","affectedInstances","isEvent","isDragging","showByHash","isResizing","isSelecting","DateComponent","AllDaySplitter","getKeyInfo","timed","getKeysForDateSpan","getKeysForEventDef","hasBgRendering","Splitter","TIMEGRID_ALL_DAY_EVENT_LIMIT","WEEK_HEADER_FORMAT","week","TimeGridView","viewSpec","dateProfileGenerator","parentEl","splitter","renderHeadIntroHtml","weekText","dayCnt","diffDays","axisStyleAttr","buildGotoAnchorHtml","forceOff","renderTimeGridBgIntroHtml","renderTimeGridIntroHtml","renderDayGridBgIntroHtml","getAllDayHtml","renderDayGridIntroHtml","renderSkeletonHtml","scroller","ScrollComponent","timeGridWrapEl","timeGridEl","dayGrid","DayGrid","renderNumberIntroHtml","colWeekNumbersVisible","cellWeekNumbersVisible","bottomCoordPadding","viewHeight","isAuto","updateBaseSize","eventLimit","scrollerHeight","scrollbarWidths","axisWidth","matchCellWidths","noScrollRowEls","filter","node","contains","display","clear","uncompensateScroll","removeSegPopover","limitRows","computeScrollerHeight","setHeight","getScrollbarWidths","rowEl","compensateScroll","lockOverflow","subtractInnerElHeight","computeInitialDateScroll","scrollTime","milliseconds","ceil","queryDateScroll","getScrollTop","applyDateScroll","scroll","setScrollTop","View","usesMinMaxTime","SimpleTimeGrid","buildDayRanges","memoize","slicer","TimeGridSlicer","calendar","registerInteractiveComponent","unregisterInteractiveComponent","dayTable","dayRanges","receiveProps","sliceProps","sliceNowDate","queryHit","rawHit","component","rect","layer","ranges","headerDates","sliceRange","segRange","intersectRanges","Slicer","TimeGridView$1","_context","buildDayTable","header","DayHeader","simpleTimeGrid","simpleDayGrid","SimpleDayGrid","splitProps","dates","datesRepDistinctDays","nextDayThreshold","isRigid","daySeries","DaySeries","DayTable","main","createPlugin","defaultView","views","class","allDaySlot","timeGridDay","duration","days","timeGridWeek","weeks","AbstractTimeGridView","default","defineProperty","value","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Advanced_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_lib_loader_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_Advanced_vue_vue_type_style_index_0_lang_scss___WEBPACK_IMPORTED_MODULE_0___default","_vm","_h","$createElement","_c","_self","staticClass","on","click","toggleWeekends","_v","gotoPast","ref","attrs","center","plugins","calendarPlugins","weekends","calendarWeekends","events","calendarEvents","editable","selectable","select","handleSelect","eventClick","handleClick","staticRenderFns","Advancedvue_type_script_lang_js_","components","FullCalendar","main_esm","data","main_default","a","timegrid_main_default","interaction_main_default","Date","methods","calendarApi","$refs","fullCalendar","getApi","gotoDate","arg","event","alert","prompt","startStr","endStr","views_Advancedvue_type_script_lang_js_","componentNormalizer","__webpack_exports__"],"mappings":"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","file":"js/advanced.04fa15b9.js","sourcesContent":["/*!\n@fullcalendar/timegrid v4.0.1\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@fullcalendar/core'), require('@fullcalendar/daygrid')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@fullcalendar/core', '@fullcalendar/daygrid'], factory) :\n    (global = global || self, factory(global.FullCalendarTimeGrid = {}, global.FullCalendar, global.FullCalendarDayGrid));\n}(this, function (exports, core, daygrid) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\n\n    /*\n    Only handles foreground segs.\n    Does not own rendering. Use for low-level util methods by TimeGrid.\n    */\n    var TimeGridEventRenderer = /** @class */ (function (_super) {\n        __extends(TimeGridEventRenderer, _super);\n        function TimeGridEventRenderer(timeGrid) {\n            var _this = _super.call(this, timeGrid.context) || this;\n            _this.timeGrid = timeGrid;\n            _this.fullTimeFormat = core.createFormatter({\n                hour: 'numeric',\n                minute: '2-digit',\n                separator: _this.context.options.defaultRangeSeparator\n            });\n            return _this;\n        }\n        // Given an array of foreground segments, render a DOM element for each, computes position,\n        // and attaches to the column inner-container elements.\n        TimeGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n            var segsByCol = this.timeGrid.groupSegsByCol(segs);\n            // order the segs within each column\n            // TODO: have groupSegsByCol do this?\n            for (var col = 0; col < segsByCol.length; col++) {\n                segsByCol[col] = this.sortEventSegs(segsByCol[col]);\n            }\n            this.segsByCol = segsByCol;\n            this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls);\n        };\n        TimeGridEventRenderer.prototype.detachSegs = function (segs) {\n            segs.forEach(function (seg) {\n                core.removeElement(seg.el);\n            });\n            this.segsByCol = null;\n        };\n        TimeGridEventRenderer.prototype.computeSegSizes = function (allSegs) {\n            var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;\n            var colCnt = timeGrid.colCnt;\n            timeGrid.computeSegVerticals(allSegs); // horizontals relies on this\n            if (segsByCol) {\n                for (var col = 0; col < colCnt; col++) {\n                    this.computeSegHorizontals(segsByCol[col]); // compute horizontal coordinates, z-index's, and reorder the array\n                }\n            }\n        };\n        TimeGridEventRenderer.prototype.assignSegSizes = function (allSegs) {\n            var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;\n            var colCnt = timeGrid.colCnt;\n            timeGrid.assignSegVerticals(allSegs); // horizontals relies on this\n            if (segsByCol) {\n                for (var col = 0; col < colCnt; col++) {\n                    this.assignSegCss(segsByCol[col]);\n                }\n            }\n        };\n        // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n        TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {\n            return {\n                hour: 'numeric',\n                minute: '2-digit',\n                meridiem: false\n            };\n        };\n        // Computes a default `displayEventEnd` value if one is not expliclty defined\n        TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n            return true;\n        };\n        // Renders the HTML for a single event segment's default rendering\n        TimeGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n            var eventRange = seg.eventRange;\n            var eventDef = eventRange.def;\n            var eventUi = eventRange.ui;\n            var allDay = eventDef.allDay;\n            var isDraggable = eventUi.startEditable;\n            var isResizableFromStart = seg.isStart && eventUi.durationEditable && this.context.options.eventResizableFromStart;\n            var isResizableFromEnd = seg.isEnd && eventUi.durationEditable;\n            var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n            var skinCss = core.cssToStr(this.getSkinCss(eventUi));\n            var timeText;\n            var fullTimeText; // more verbose time text. for the print stylesheet\n            var startTimeText; // just the start time text\n            classes.unshift('fc-time-grid-event');\n            // if the event appears to span more than one day...\n            if (core.isMultiDayRange(eventRange.range)) {\n                // Don't display time text on segments that run entirely through a day.\n                // That would appear as midnight-midnight and would look dumb.\n                // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n                if (seg.isStart || seg.isEnd) {\n                    var unzonedStart = seg.start;\n                    var unzonedEnd = seg.end;\n                    timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay); // TODO: give the timezones\n                    fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat);\n                    startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false); // displayEnd=false\n                }\n            }\n            else {\n                // Display the normal time text for the *event's* times\n                timeText = this.getTimeText(eventRange);\n                fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat);\n                startTimeText = this.getTimeText(eventRange, null, false); // displayEnd=false\n            }\n            return '<a class=\"' + classes.join(' ') + '\"' +\n                (eventDef.url ?\n                    ' href=\"' + core.htmlEscape(eventDef.url) + '\"' :\n                    '') +\n                (skinCss ?\n                    ' style=\"' + skinCss + '\"' :\n                    '') +\n                '>' +\n                '<div class=\"fc-content\">' +\n                (timeText ?\n                    '<div class=\"fc-time\"' +\n                        ' data-start=\"' + core.htmlEscape(startTimeText) + '\"' +\n                        ' data-full=\"' + core.htmlEscape(fullTimeText) + '\"' +\n                        '>' +\n                        '<span>' + core.htmlEscape(timeText) + '</span>' +\n                        '</div>' :\n                    '') +\n                (eventDef.title ?\n                    '<div class=\"fc-title\">' +\n                        core.htmlEscape(eventDef.title) +\n                        '</div>' :\n                    '') +\n                '</div>' +\n                /* TODO: write CSS for this\n                (isResizableFromStart ?\n                  '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n                  ''\n                  ) +\n                */\n                (isResizableFromEnd ?\n                    '<div class=\"fc-resizer fc-end-resizer\"></div>' :\n                    '') +\n                '</a>';\n        };\n        // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n        // Assumed the segs are already ordered.\n        // NOTE: Also reorders the given array by date!\n        TimeGridEventRenderer.prototype.computeSegHorizontals = function (segs) {\n            var levels;\n            var level0;\n            var i;\n            levels = buildSlotSegLevels(segs);\n            computeForwardSlotSegs(levels);\n            if ((level0 = levels[0])) {\n                for (i = 0; i < level0.length; i++) {\n                    computeSlotSegPressures(level0[i]);\n                }\n                for (i = 0; i < level0.length; i++) {\n                    this.computeSegForwardBack(level0[i], 0, 0);\n                }\n            }\n        };\n        // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n        // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n        // seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n        //\n        // The segment might be part of a \"series\", which means consecutive segments with the same pressure\n        // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n        // segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n        // coordinate of the first segment in the series.\n        TimeGridEventRenderer.prototype.computeSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {\n            var forwardSegs = seg.forwardSegs;\n            var i;\n            if (seg.forwardCoord === undefined) { // not already computed\n                if (!forwardSegs.length) {\n                    // if there are no forward segments, this segment should butt up against the edge\n                    seg.forwardCoord = 1;\n                }\n                else {\n                    // sort highest pressure first\n                    this.sortForwardSegs(forwardSegs);\n                    // this segment's forwardCoord will be calculated from the backwardCoord of the\n                    // highest-pressure forward segment.\n                    this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n                    seg.forwardCoord = forwardSegs[0].backwardCoord;\n                }\n                // calculate the backwardCoord from the forwardCoord. consider the series\n                seg.backwardCoord = seg.forwardCoord -\n                    (seg.forwardCoord - seriesBackwardCoord) / // available width for series\n                        (seriesBackwardPressure + 1); // # of segments in the series\n                // use this segment's coordinates to computed the coordinates of the less-pressurized\n                // forward segments\n                for (i = 0; i < forwardSegs.length; i++) {\n                    this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);\n                }\n            }\n        };\n        TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {\n            var objs = forwardSegs.map(buildTimeGridSegCompareObj);\n            var specs = [\n                // put higher-pressure first\n                { field: 'forwardPressure', order: -1 },\n                // put segments that are closer to initial edge first (and favor ones with no coords yet)\n                { field: 'backwardCoord', order: 1 }\n            ].concat(this.context.view.eventOrderSpecs);\n            objs.sort(function (obj0, obj1) {\n                return core.compareByFieldSpecs(obj0, obj1, specs);\n            });\n            return objs.map(function (c) {\n                return c._seg;\n            });\n        };\n        // Given foreground event segments that have already had their position coordinates computed,\n        // assigns position-related CSS values to their elements.\n        TimeGridEventRenderer.prototype.assignSegCss = function (segs) {\n            for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n                var seg = segs_1[_i];\n                core.applyStyle(seg.el, this.generateSegCss(seg));\n                if (seg.level > 0) {\n                    seg.el.classList.add('fc-time-grid-event-inset');\n                }\n                // if the event is short that the title will be cut off,\n                // attach a className that condenses the title into the time area.\n                if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {\n                    seg.el.classList.add('fc-short'); // TODO: \"condensed\" is a better name\n                }\n            }\n        };\n        // Generates an object with CSS properties/values that should be applied to an event segment element.\n        // Contains important positioning-related properties that should be applied to any event element, customized or not.\n        TimeGridEventRenderer.prototype.generateSegCss = function (seg) {\n            var shouldOverlap = this.context.options.slotEventOverlap;\n            var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n            var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n            var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first\n            var isRtl = this.timeGrid.isRtl;\n            var left; // amount of space from left edge, a fraction of the total width\n            var right; // amount of space from right edge, a fraction of the total width\n            if (shouldOverlap) {\n                // double the width, but don't go beyond the maximum forward coordinate (1.0)\n                forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n            }\n            if (isRtl) {\n                left = 1 - forwardCoord;\n                right = backwardCoord;\n            }\n            else {\n                left = backwardCoord;\n                right = 1 - forwardCoord;\n            }\n            props.zIndex = seg.level + 1; // convert from 0-base to 1-based\n            props.left = left * 100 + '%';\n            props.right = right * 100 + '%';\n            if (shouldOverlap && seg.forwardPressure) {\n                // add padding to the edge so that forward stacked events don't cover the resizer's icon\n                props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n            }\n            return props;\n        };\n        return TimeGridEventRenderer;\n    }(core.FgEventRenderer));\n    // Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n    // left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\n    function buildSlotSegLevels(segs) {\n        var levels = [];\n        var i;\n        var seg;\n        var j;\n        for (i = 0; i < segs.length; i++) {\n            seg = segs[i];\n            // go through all the levels and stop on the first level where there are no collisions\n            for (j = 0; j < levels.length; j++) {\n                if (!computeSlotSegCollisions(seg, levels[j]).length) {\n                    break;\n                }\n            }\n            seg.level = j;\n            (levels[j] || (levels[j] = [])).push(seg);\n        }\n        return levels;\n    }\n    // For every segment, figure out the other segments that are in subsequent\n    // levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\n    function computeForwardSlotSegs(levels) {\n        var i;\n        var level;\n        var j;\n        var seg;\n        var k;\n        for (i = 0; i < levels.length; i++) {\n            level = levels[i];\n            for (j = 0; j < level.length; j++) {\n                seg = level[j];\n                seg.forwardSegs = [];\n                for (k = i + 1; k < levels.length; k++) {\n                    computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n                }\n            }\n        }\n    }\n    // Figure out which path forward (via seg.forwardSegs) results in the longest path until\n    // the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\n    function computeSlotSegPressures(seg) {\n        var forwardSegs = seg.forwardSegs;\n        var forwardPressure = 0;\n        var i;\n        var forwardSeg;\n        if (seg.forwardPressure === undefined) { // not already computed\n            for (i = 0; i < forwardSegs.length; i++) {\n                forwardSeg = forwardSegs[i];\n                // figure out the child's maximum forward path\n                computeSlotSegPressures(forwardSeg);\n                // either use the existing maximum, or use the child's forward pressure\n                // plus one (for the forwardSeg itself)\n                forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);\n            }\n            seg.forwardPressure = forwardPressure;\n        }\n    }\n    // Find all the segments in `otherSegs` that vertically collide with `seg`.\n    // Append into an optionally-supplied `results` array and return.\n    function computeSlotSegCollisions(seg, otherSegs, results) {\n        if (results === void 0) { results = []; }\n        for (var i = 0; i < otherSegs.length; i++) {\n            if (isSlotSegCollision(seg, otherSegs[i])) {\n                results.push(otherSegs[i]);\n            }\n        }\n        return results;\n    }\n    // Do these segments occupy the same vertical space?\n    function isSlotSegCollision(seg1, seg2) {\n        return seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n    }\n    function buildTimeGridSegCompareObj(seg) {\n        var obj = core.buildSegCompareObj(seg);\n        obj.forwardPressure = seg.forwardPressure;\n        obj.backwardCoord = seg.backwardCoord;\n        return obj;\n    }\n\n    var TimeGridMirrorRenderer = /** @class */ (function (_super) {\n        __extends(TimeGridMirrorRenderer, _super);\n        function TimeGridMirrorRenderer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        TimeGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n            this.segsByCol = this.timeGrid.groupSegsByCol(segs);\n            this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls);\n            this.sourceSeg = mirrorInfo.sourceSeg;\n        };\n        TimeGridMirrorRenderer.prototype.generateSegCss = function (seg) {\n            var props = _super.prototype.generateSegCss.call(this, seg);\n            var sourceSeg = this.sourceSeg;\n            if (sourceSeg && sourceSeg.col === seg.col) {\n                var sourceSegProps = _super.prototype.generateSegCss.call(this, sourceSeg);\n                props.left = sourceSegProps.left;\n                props.right = sourceSegProps.right;\n                props.marginLeft = sourceSegProps.marginLeft;\n                props.marginRight = sourceSegProps.marginRight;\n            }\n            return props;\n        };\n        return TimeGridMirrorRenderer;\n    }(TimeGridEventRenderer));\n\n    var TimeGridFillRenderer = /** @class */ (function (_super) {\n        __extends(TimeGridFillRenderer, _super);\n        function TimeGridFillRenderer(timeGrid) {\n            var _this = _super.call(this, timeGrid.context) || this;\n            _this.timeGrid = timeGrid;\n            return _this;\n        }\n        TimeGridFillRenderer.prototype.attachSegs = function (type, segs) {\n            var timeGrid = this.timeGrid;\n            var containerEls;\n            // TODO: more efficient lookup\n            if (type === 'bgEvent') {\n                containerEls = timeGrid.bgContainerEls;\n            }\n            else if (type === 'businessHours') {\n                containerEls = timeGrid.businessContainerEls;\n            }\n            else if (type === 'highlight') {\n                containerEls = timeGrid.highlightContainerEls;\n            }\n            timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);\n            return segs.map(function (seg) {\n                return seg.el;\n            });\n        };\n        TimeGridFillRenderer.prototype.computeSegSizes = function (segs) {\n            this.timeGrid.computeSegVerticals(segs);\n        };\n        TimeGridFillRenderer.prototype.assignSegSizes = function (segs) {\n            this.timeGrid.assignSegVerticals(segs);\n        };\n        return TimeGridFillRenderer;\n    }(core.FillRenderer));\n\n    /* A component that renders one or more columns of vertical time slots\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // potential nice values for the slot-duration and interval-duration\n    // from largest to smallest\n    var AGENDA_STOCK_SUB_DURATIONS = [\n        { hours: 1 },\n        { minutes: 30 },\n        { minutes: 15 },\n        { seconds: 30 },\n        { seconds: 15 }\n    ];\n    var TimeGrid = /** @class */ (function (_super) {\n        __extends(TimeGrid, _super);\n        function TimeGrid(context, el, renderProps) {\n            var _this = _super.call(this, context, el) || this;\n            _this.isSlatSizesDirty = false;\n            _this.isColSizesDirty = false;\n            _this.renderSlats = core.memoizeRendering(_this._renderSlats);\n            var eventRenderer = _this.eventRenderer = new TimeGridEventRenderer(_this);\n            var fillRenderer = _this.fillRenderer = new TimeGridFillRenderer(_this);\n            _this.mirrorRenderer = new TimeGridMirrorRenderer(_this);\n            var renderColumns = _this.renderColumns = core.memoizeRendering(_this._renderColumns, _this._unrenderColumns);\n            _this.renderBusinessHours = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderColumns]);\n            _this.renderDateSelection = core.memoizeRendering(_this._renderDateSelection, _this._unrenderDateSelection, [renderColumns]);\n            _this.renderFgEvents = core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderColumns]);\n            _this.renderBgEvents = core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderColumns]);\n            _this.renderEventSelection = core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n            _this.renderEventDrag = core.memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderColumns]);\n            _this.renderEventResize = core.memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderColumns]);\n            _this.processOptions();\n            el.innerHTML =\n                '<div class=\"fc-bg\"></div>' +\n                    '<div class=\"fc-slats\"></div>' +\n                    '<hr class=\"fc-divider ' + _this.theme.getClass('widgetHeader') + '\" style=\"display:none\" />';\n            _this.rootBgContainerEl = el.querySelector('.fc-bg');\n            _this.slatContainerEl = el.querySelector('.fc-slats');\n            _this.bottomRuleEl = el.querySelector('.fc-divider');\n            _this.renderProps = renderProps;\n            return _this;\n        }\n        /* Options\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Parses various options into properties of this object\n        TimeGrid.prototype.processOptions = function () {\n            var slotDuration = this.opt('slotDuration');\n            var snapDuration = this.opt('snapDuration');\n            var snapsPerSlot;\n            var input;\n            slotDuration = core.createDuration(slotDuration);\n            snapDuration = snapDuration ? core.createDuration(snapDuration) : slotDuration;\n            snapsPerSlot = core.wholeDivideDurations(slotDuration, snapDuration);\n            if (snapsPerSlot === null) {\n                snapDuration = slotDuration;\n                snapsPerSlot = 1;\n                // TODO: say warning?\n            }\n            this.slotDuration = slotDuration;\n            this.snapDuration = snapDuration;\n            this.snapsPerSlot = snapsPerSlot;\n            // might be an array value (for TimelineView).\n            // if so, getting the most granular entry (the last one probably).\n            input = this.opt('slotLabelFormat');\n            if (Array.isArray(input)) {\n                input = input[input.length - 1];\n            }\n            this.labelFormat = core.createFormatter(input || {\n                hour: 'numeric',\n                minute: '2-digit',\n                omitZeroMinute: true,\n                meridiem: 'short'\n            });\n            input = this.opt('slotLabelInterval');\n            this.labelInterval = input ?\n                core.createDuration(input) :\n                this.computeLabelInterval(slotDuration);\n        };\n        // Computes an automatic value for slotLabelInterval\n        TimeGrid.prototype.computeLabelInterval = function (slotDuration) {\n            var i;\n            var labelInterval;\n            var slotsPerLabel;\n            // find the smallest stock label interval that results in more than one slots-per-label\n            for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n                labelInterval = core.createDuration(AGENDA_STOCK_SUB_DURATIONS[i]);\n                slotsPerLabel = core.wholeDivideDurations(labelInterval, slotDuration);\n                if (slotsPerLabel !== null && slotsPerLabel > 1) {\n                    return labelInterval;\n                }\n            }\n            return slotDuration; // fall back\n        };\n        /* Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.render = function (props) {\n            var cells = props.cells;\n            this.colCnt = cells.length;\n            this.renderSlats(props.dateProfile);\n            this.renderColumns(props.cells, props.dateProfile);\n            this.renderBusinessHours(props.businessHourSegs);\n            this.renderDateSelection(props.dateSelectionSegs);\n            this.renderFgEvents(props.fgEventSegs);\n            this.renderBgEvents(props.bgEventSegs);\n            this.renderEventSelection(props.eventSelection);\n            this.renderEventDrag(props.eventDrag);\n            this.renderEventResize(props.eventResize);\n        };\n        TimeGrid.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            // should unrender everything else too\n            this.renderSlats.unrender();\n            this.renderColumns.unrender();\n        };\n        TimeGrid.prototype.updateSize = function (isResize) {\n            var _a = this, fillRenderer = _a.fillRenderer, eventRenderer = _a.eventRenderer, mirrorRenderer = _a.mirrorRenderer;\n            if (isResize || this.isSlatSizesDirty) {\n                this.buildSlatPositions();\n                this.isSlatSizesDirty = false;\n            }\n            if (isResize || this.isColSizesDirty) {\n                this.buildColPositions();\n                this.isColSizesDirty = false;\n            }\n            fillRenderer.computeSizes(isResize);\n            eventRenderer.computeSizes(isResize);\n            mirrorRenderer.computeSizes(isResize);\n            fillRenderer.assignSizes(isResize);\n            eventRenderer.assignSizes(isResize);\n            mirrorRenderer.assignSizes(isResize);\n        };\n        TimeGrid.prototype._renderSlats = function (dateProfile) {\n            var theme = this.theme;\n            this.slatContainerEl.innerHTML =\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                    this.renderSlatRowHtml(dateProfile) +\n                    '</table>';\n            this.slatEls = core.findElements(this.slatContainerEl, 'tr');\n            this.slatPositions = new core.PositionCache(this.el, this.slatEls, false, true // vertical\n            );\n            this.isSlatSizesDirty = true;\n        };\n        // Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n        TimeGrid.prototype.renderSlatRowHtml = function (dateProfile) {\n            var _a = this, dateEnv = _a.dateEnv, theme = _a.theme, isRtl = _a.isRtl;\n            var html = '';\n            var dayStart = core.startOfDay(dateProfile.renderRange.start);\n            var slotTime = dateProfile.minTime;\n            var slotIterator = core.createDuration(0);\n            var slotDate; // will be on the view's first day, but we only care about its time\n            var isLabeled;\n            var axisHtml;\n            // Calculate the time for each slot\n            while (core.asRoughMs(slotTime) < core.asRoughMs(dateProfile.maxTime)) {\n                slotDate = dateEnv.add(dayStart, slotTime);\n                isLabeled = core.wholeDivideDurations(slotIterator, this.labelInterval) !== null;\n                axisHtml =\n                    '<td class=\"fc-axis fc-time ' + theme.getClass('widgetContent') + '\">' +\n                        (isLabeled ?\n                            '<span>' + // for matchCellWidths\n                                core.htmlEscape(dateEnv.format(slotDate, this.labelFormat)) +\n                                '</span>' :\n                            '') +\n                        '</td>';\n                html +=\n                    '<tr data-time=\"' + core.formatIsoTimeString(slotDate) + '\"' +\n                        (isLabeled ? '' : ' class=\"fc-minor\"') +\n                        '>' +\n                        (!isRtl ? axisHtml : '') +\n                        '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' +\n                        (isRtl ? axisHtml : '') +\n                        '</tr>';\n                slotTime = core.addDurations(slotTime, this.slotDuration);\n                slotIterator = core.addDurations(slotIterator, this.slotDuration);\n            }\n            return html;\n        };\n        TimeGrid.prototype._renderColumns = function (cells, dateProfile) {\n            var theme = this.theme;\n            var bgRow = new daygrid.DayBgRow(this.context);\n            this.rootBgContainerEl.innerHTML =\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                    bgRow.renderHtml({\n                        cells: cells,\n                        dateProfile: dateProfile,\n                        renderIntroHtml: this.renderProps.renderBgIntroHtml\n                    }) +\n                    '</table>';\n            this.colEls = core.findElements(this.el, '.fc-day, .fc-disabled-day');\n            if (this.isRtl) {\n                this.colEls.reverse();\n            }\n            this.colPositions = new core.PositionCache(this.el, this.colEls, true, // horizontal\n            false);\n            this.renderContentSkeleton();\n            this.isColSizesDirty = true;\n        };\n        TimeGrid.prototype._unrenderColumns = function () {\n            this.unrenderContentSkeleton();\n        };\n        /* Content Skeleton\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Renders the DOM that the view's content will live in\n        TimeGrid.prototype.renderContentSkeleton = function () {\n            var parts = [];\n            var skeletonEl;\n            parts.push(this.renderProps.renderIntroHtml());\n            for (var i = 0; i < this.colCnt; i++) {\n                parts.push('<td>' +\n                    '<div class=\"fc-content-col\">' +\n                    '<div class=\"fc-event-container fc-mirror-container\"></div>' +\n                    '<div class=\"fc-event-container\"></div>' +\n                    '<div class=\"fc-highlight-container\"></div>' +\n                    '<div class=\"fc-bgevent-container\"></div>' +\n                    '<div class=\"fc-business-container\"></div>' +\n                    '</div>' +\n                    '</td>');\n            }\n            if (this.isRtl) {\n                parts.reverse();\n            }\n            skeletonEl = this.contentSkeletonEl = core.htmlToElement('<div class=\"fc-content-skeleton\">' +\n                '<table>' +\n                '<tr>' + parts.join('') + '</tr>' +\n                '</table>' +\n                '</div>');\n            this.colContainerEls = core.findElements(skeletonEl, '.fc-content-col');\n            this.mirrorContainerEls = core.findElements(skeletonEl, '.fc-mirror-container');\n            this.fgContainerEls = core.findElements(skeletonEl, '.fc-event-container:not(.fc-mirror-container)');\n            this.bgContainerEls = core.findElements(skeletonEl, '.fc-bgevent-container');\n            this.highlightContainerEls = core.findElements(skeletonEl, '.fc-highlight-container');\n            this.businessContainerEls = core.findElements(skeletonEl, '.fc-business-container');\n            if (this.isRtl) {\n                this.colContainerEls.reverse();\n                this.mirrorContainerEls.reverse();\n                this.fgContainerEls.reverse();\n                this.bgContainerEls.reverse();\n                this.highlightContainerEls.reverse();\n                this.businessContainerEls.reverse();\n            }\n            this.el.appendChild(skeletonEl);\n        };\n        TimeGrid.prototype.unrenderContentSkeleton = function () {\n            core.removeElement(this.contentSkeletonEl);\n        };\n        // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n        TimeGrid.prototype.groupSegsByCol = function (segs) {\n            var segsByCol = [];\n            var i;\n            for (i = 0; i < this.colCnt; i++) {\n                segsByCol.push([]);\n            }\n            for (i = 0; i < segs.length; i++) {\n                segsByCol[segs[i].col].push(segs[i]);\n            }\n            return segsByCol;\n        };\n        // Given segments grouped by column, insert the segments' elements into a parallel array of container\n        // elements, each living within a column.\n        TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {\n            var col;\n            var segs;\n            var i;\n            for (col = 0; col < this.colCnt; col++) { // iterate each column grouping\n                segs = segsByCol[col];\n                for (i = 0; i < segs.length; i++) {\n                    containerEls[col].appendChild(segs[i].el);\n                }\n            }\n        };\n        /* Now Indicator\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.getNowIndicatorUnit = function () {\n            return 'minute'; // will refresh on the minute\n        };\n        TimeGrid.prototype.renderNowIndicator = function (segs, date) {\n            // HACK: if date columns not ready for some reason (scheduler)\n            if (!this.colContainerEls) {\n                return;\n            }\n            var top = this.computeDateTop(date);\n            var nodes = [];\n            var i;\n            // render lines within the columns\n            for (i = 0; i < segs.length; i++) {\n                var lineEl = core.createElement('div', { className: 'fc-now-indicator fc-now-indicator-line' });\n                lineEl.style.top = top + 'px';\n                this.colContainerEls[segs[i].col].appendChild(lineEl);\n                nodes.push(lineEl);\n            }\n            // render an arrow over the axis\n            if (segs.length > 0) { // is the current time in view?\n                var arrowEl = core.createElement('div', { className: 'fc-now-indicator fc-now-indicator-arrow' });\n                arrowEl.style.top = top + 'px';\n                this.contentSkeletonEl.appendChild(arrowEl);\n                nodes.push(arrowEl);\n            }\n            this.nowIndicatorEls = nodes;\n        };\n        TimeGrid.prototype.unrenderNowIndicator = function () {\n            if (this.nowIndicatorEls) {\n                this.nowIndicatorEls.forEach(core.removeElement);\n                this.nowIndicatorEls = null;\n            }\n        };\n        /* Coordinates\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.getTotalSlatHeight = function () {\n            return this.slatContainerEl.offsetHeight;\n        };\n        // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n        // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n        TimeGrid.prototype.computeDateTop = function (when, startOfDayDate) {\n            if (!startOfDayDate) {\n                startOfDayDate = core.startOfDay(when);\n            }\n            return this.computeTimeTop(when.valueOf() - startOfDayDate.valueOf());\n        };\n        // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n        TimeGrid.prototype.computeTimeTop = function (timeMs) {\n            var len = this.slatEls.length;\n            var dateProfile = this.props.dateProfile;\n            var slatCoverage = (timeMs - core.asRoughMs(dateProfile.minTime)) / core.asRoughMs(this.slotDuration); // floating-point value of # of slots covered\n            var slatIndex;\n            var slatRemainder;\n            // compute a floating-point number for how many slats should be progressed through.\n            // from 0 to number of slats (inclusive)\n            // constrained because minTime/maxTime might be customized.\n            slatCoverage = Math.max(0, slatCoverage);\n            slatCoverage = Math.min(len, slatCoverage);\n            // an integer index of the furthest whole slat\n            // from 0 to number slats (*exclusive*, so len-1)\n            slatIndex = Math.floor(slatCoverage);\n            slatIndex = Math.min(slatIndex, len - 1);\n            // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n            // could be 1.0 if slatCoverage is covering *all* the slots\n            slatRemainder = slatCoverage - slatIndex;\n            return this.slatPositions.tops[slatIndex] +\n                this.slatPositions.getHeight(slatIndex) * slatRemainder;\n        };\n        // For each segment in an array, computes and assigns its top and bottom properties\n        TimeGrid.prototype.computeSegVerticals = function (segs) {\n            var eventMinHeight = this.opt('timeGridEventMinHeight');\n            var i;\n            var seg;\n            var dayDate;\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                dayDate = this.props.cells[seg.col].date;\n                seg.top = this.computeDateTop(seg.start, dayDate);\n                seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.end, dayDate));\n            }\n        };\n        // Given segments that already have their top/bottom properties computed, applies those values to\n        // the segments' elements.\n        TimeGrid.prototype.assignSegVerticals = function (segs) {\n            var i;\n            var seg;\n            for (i = 0; i < segs.length; i++) {\n                seg = segs[i];\n                core.applyStyle(seg.el, this.generateSegVerticalCss(seg));\n            }\n        };\n        // Generates an object with CSS properties for the top/bottom coordinates of a segment element\n        TimeGrid.prototype.generateSegVerticalCss = function (seg) {\n            return {\n                top: seg.top,\n                bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n            };\n        };\n        /* Sizing\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.buildColPositions = function () {\n            this.colPositions.build();\n        };\n        TimeGrid.prototype.buildSlatPositions = function () {\n            this.slatPositions.build();\n        };\n        /* Hit System\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype.positionToHit = function (positionLeft, positionTop) {\n            var _a = this, dateEnv = _a.dateEnv, snapsPerSlot = _a.snapsPerSlot, slatPositions = _a.slatPositions, colPositions = _a.colPositions;\n            var colIndex = colPositions.leftToIndex(positionLeft);\n            var slatIndex = slatPositions.topToIndex(positionTop);\n            if (colIndex != null && slatIndex != null) {\n                var slatTop = slatPositions.tops[slatIndex];\n                var slatHeight = slatPositions.getHeight(slatIndex);\n                var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n                var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n                var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n                var dayDate = this.props.cells[colIndex].date;\n                var time = core.addDurations(this.props.dateProfile.minTime, core.multiplyDuration(this.snapDuration, snapIndex));\n                var start = dateEnv.add(dayDate, time);\n                var end = dateEnv.add(start, this.snapDuration);\n                return {\n                    col: colIndex,\n                    dateSpan: {\n                        range: { start: start, end: end },\n                        allDay: false\n                    },\n                    dayEl: this.colEls[colIndex],\n                    relativeRect: {\n                        left: colPositions.lefts[colIndex],\n                        right: colPositions.rights[colIndex],\n                        top: slatTop,\n                        bottom: slatTop + slatHeight\n                    }\n                };\n            }\n        };\n        /* Event Drag Visualization\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype._renderEventDrag = function (state) {\n            if (state) {\n                this.eventRenderer.hideByHash(state.affectedInstances);\n                if (state.isEvent) {\n                    this.mirrorRenderer.renderSegs(state.segs, { isDragging: true, sourceSeg: state.sourceSeg });\n                }\n                else {\n                    this.fillRenderer.renderSegs('highlight', state.segs);\n                }\n            }\n        };\n        TimeGrid.prototype._unrenderEventDrag = function (state) {\n            if (state) {\n                this.eventRenderer.showByHash(state.affectedInstances);\n                this.mirrorRenderer.unrender(state.segs, { isDragging: true, sourceSeg: state.sourceSeg });\n                this.fillRenderer.unrender('highlight');\n            }\n        };\n        /* Event Resize Visualization\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGrid.prototype._renderEventResize = function (state) {\n            if (state) {\n                this.eventRenderer.hideByHash(state.affectedInstances);\n                this.mirrorRenderer.renderSegs(state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n            }\n        };\n        TimeGrid.prototype._unrenderEventResize = function (state) {\n            if (state) {\n                this.eventRenderer.showByHash(state.affectedInstances);\n                this.mirrorRenderer.unrender(state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n            }\n        };\n        /* Selection\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n        TimeGrid.prototype._renderDateSelection = function (segs) {\n            if (segs) {\n                if (this.opt('selectMirror')) {\n                    this.mirrorRenderer.renderSegs(segs, { isSelecting: true });\n                }\n                else {\n                    this.fillRenderer.renderSegs('highlight', segs);\n                }\n            }\n        };\n        TimeGrid.prototype._unrenderDateSelection = function (segs) {\n            this.mirrorRenderer.unrender(segs, { isSelecting: true });\n            this.fillRenderer.unrender('highlight');\n        };\n        return TimeGrid;\n    }(core.DateComponent));\n\n    var AllDaySplitter = /** @class */ (function (_super) {\n        __extends(AllDaySplitter, _super);\n        function AllDaySplitter() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        AllDaySplitter.prototype.getKeyInfo = function () {\n            return {\n                allDay: {},\n                timed: {}\n            };\n        };\n        AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n            if (dateSpan.allDay) {\n                return ['allDay'];\n            }\n            else {\n                return ['timed'];\n            }\n        };\n        AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n            if (!eventDef.allDay) {\n                return ['timed'];\n            }\n            else if (core.hasBgRendering(eventDef)) {\n                return ['timed', 'allDay'];\n            }\n            else {\n                return ['allDay'];\n            }\n        };\n        return AllDaySplitter;\n    }(core.Splitter));\n\n    var TIMEGRID_ALL_DAY_EVENT_LIMIT = 5;\n    var WEEK_HEADER_FORMAT = core.createFormatter({ week: 'short' });\n    /* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n    ----------------------------------------------------------------------------------------------------------------------*/\n    // Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n    // Responsible for managing width/height.\n    var TimeGridView = /** @class */ (function (_super) {\n        __extends(TimeGridView, _super);\n        function TimeGridView(context, viewSpec, dateProfileGenerator, parentEl) {\n            var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;\n            _this.splitter = new AllDaySplitter();\n            /* Header Render Methods\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that will go before the day-of week header cells\n            _this.renderHeadIntroHtml = function () {\n                var _a = _this, theme = _a.theme, dateEnv = _a.dateEnv;\n                var range = _this.props.dateProfile.renderRange;\n                var dayCnt = core.diffDays(range.start, range.end);\n                var weekText;\n                if (_this.opt('weekNumbers')) {\n                    weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT);\n                    return '' +\n                        '<th class=\"fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '>' +\n                        core.buildGotoAnchorHtml(// aside from link, important for matchCellWidths\n                        _this, { date: range.start, type: 'week', forceOff: dayCnt > 1 }, core.htmlEscape(weekText) // inner HTML\n                        ) +\n                        '</th>';\n                }\n                else {\n                    return '<th class=\"fc-axis ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '></th>';\n                }\n            };\n            /* Time Grid Render Methods\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n            _this.renderTimeGridBgIntroHtml = function () {\n                var theme = _this.theme;\n                return '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '></td>';\n            };\n            // Generates the HTML that goes before all other types of cells.\n            // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n            _this.renderTimeGridIntroHtml = function () {\n                return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n            };\n            /* Day Grid Render Methods\n            ------------------------------------------------------------------------------------------------------------------*/\n            // Generates the HTML that goes before the all-day cells\n            _this.renderDayGridBgIntroHtml = function () {\n                var theme = _this.theme;\n                return '' +\n                    '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '>' +\n                    '<span>' + // needed for matchCellWidths\n                    core.getAllDayHtml(_this) +\n                    '</span>' +\n                    '</td>';\n            };\n            // Generates the HTML that goes before all other types of cells.\n            // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n            _this.renderDayGridIntroHtml = function () {\n                return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n            };\n            _this.el.classList.add('fc-timeGrid-view');\n            _this.el.innerHTML = _this.renderSkeletonHtml();\n            _this.scroller = new core.ScrollComponent('hidden', // overflow x\n            'auto' // overflow y\n            );\n            var timeGridWrapEl = _this.scroller.el;\n            _this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl);\n            timeGridWrapEl.classList.add('fc-time-grid-container');\n            var timeGridEl = core.createElement('div', { className: 'fc-time-grid' });\n            timeGridWrapEl.appendChild(timeGridEl);\n            _this.timeGrid = new TimeGrid(_this.context, timeGridEl, {\n                renderBgIntroHtml: _this.renderTimeGridBgIntroHtml,\n                renderIntroHtml: _this.renderTimeGridIntroHtml\n            });\n            if (_this.opt('allDaySlot')) { // should we display the \"all-day\" area?\n                _this.dayGrid = new daygrid.DayGrid(// the all-day subcomponent of this view\n                _this.context, _this.el.querySelector('.fc-day-grid'), {\n                    renderNumberIntroHtml: _this.renderDayGridIntroHtml,\n                    renderBgIntroHtml: _this.renderDayGridBgIntroHtml,\n                    renderIntroHtml: _this.renderDayGridIntroHtml,\n                    colWeekNumbersVisible: false,\n                    cellWeekNumbersVisible: false\n                });\n                // have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n                _this.dayGrid.bottomCoordPadding = _this.el.querySelector('.fc-divider').offsetHeight;\n            }\n            return _this;\n        }\n        TimeGridView.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.timeGrid.destroy();\n            if (this.dayGrid) {\n                this.dayGrid.destroy();\n            }\n            this.scroller.destroy();\n        };\n        /* Rendering\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Builds the HTML skeleton for the view.\n        // The day-grid and time-grid components will render inside containers defined by this HTML.\n        TimeGridView.prototype.renderSkeletonHtml = function () {\n            var theme = this.theme;\n            return '' +\n                '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                (this.opt('columnHeader') ?\n                    '<thead class=\"fc-head\">' +\n                        '<tr>' +\n                        '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' +\n                        '</tr>' +\n                        '</thead>' :\n                    '') +\n                '<tbody class=\"fc-body\">' +\n                '<tr>' +\n                '<td class=\"' + theme.getClass('widgetContent') + '\">' +\n                (this.opt('allDaySlot') ?\n                    '<div class=\"fc-day-grid\"></div>' +\n                        '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" />' :\n                    '') +\n                '</td>' +\n                '</tr>' +\n                '</tbody>' +\n                '</table>';\n        };\n        /* Now Indicator\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGridView.prototype.getNowIndicatorUnit = function () {\n            return this.timeGrid.getNowIndicatorUnit();\n        };\n        // subclasses should implement\n        // renderNowIndicator(date: DateMarker) {\n        // }\n        TimeGridView.prototype.unrenderNowIndicator = function () {\n            this.timeGrid.unrenderNowIndicator();\n        };\n        /* Dimensions\n        ------------------------------------------------------------------------------------------------------------------*/\n        TimeGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n            _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n            this.timeGrid.updateSize(isResize);\n            if (this.dayGrid) {\n                this.dayGrid.updateSize(isResize);\n            }\n        };\n        // Adjusts the vertical dimensions of the view to the specified values\n        TimeGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n            var _this = this;\n            var eventLimit;\n            var scrollerHeight;\n            var scrollbarWidths;\n            // make all axis cells line up\n            this.axisWidth = core.matchCellWidths(core.findElements(this.el, '.fc-axis'));\n            // hack to give the view some height prior to timeGrid's columns being rendered\n            // TODO: separate setting height from scroller VS timeGrid.\n            if (!this.timeGrid.colEls) {\n                if (!isAuto) {\n                    scrollerHeight = this.computeScrollerHeight(viewHeight);\n                    this.scroller.setHeight(scrollerHeight);\n                }\n                return;\n            }\n            // set of fake row elements that must compensate when scroller has scrollbars\n            var noScrollRowEls = core.findElements(this.el, '.fc-row').filter(function (node) {\n                return !_this.scroller.el.contains(node);\n            });\n            // reset all dimensions back to the original state\n            this.timeGrid.bottomRuleEl.style.display = 'none'; // will be shown later if this <hr> is necessary\n            this.scroller.clear(); // sets height to 'auto' and clears overflow\n            noScrollRowEls.forEach(core.uncompensateScroll);\n            // limit number of events in the all-day area\n            if (this.dayGrid) {\n                this.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n                eventLimit = this.opt('eventLimit');\n                if (eventLimit && typeof eventLimit !== 'number') {\n                    eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n                }\n                if (eventLimit) {\n                    this.dayGrid.limitRows(eventLimit);\n                }\n            }\n            if (!isAuto) { // should we force dimensions of the scroll container?\n                scrollerHeight = this.computeScrollerHeight(viewHeight);\n                this.scroller.setHeight(scrollerHeight);\n                scrollbarWidths = this.scroller.getScrollbarWidths();\n                if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n                    // make the all-day and header rows lines up\n                    noScrollRowEls.forEach(function (rowEl) {\n                        core.compensateScroll(rowEl, scrollbarWidths);\n                    });\n                    // the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n                    // and reapply the desired height to the scroller.\n                    scrollerHeight = this.computeScrollerHeight(viewHeight);\n                    this.scroller.setHeight(scrollerHeight);\n                }\n                // guarantees the same scrollbar widths\n                this.scroller.lockOverflow(scrollbarWidths);\n                // if there's any space below the slats, show the horizontal rule.\n                // this won't cause any new overflow, because lockOverflow already called.\n                if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n                    this.timeGrid.bottomRuleEl.style.display = '';\n                }\n            }\n        };\n        // given a desired total height of the view, returns what the height of the scroller should be\n        TimeGridView.prototype.computeScrollerHeight = function (viewHeight) {\n            return viewHeight -\n                core.subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n        };\n        /* Scroll\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Computes the initial pre-configured scroll state prior to allowing the user to change it\n        TimeGridView.prototype.computeInitialDateScroll = function () {\n            var scrollTime = core.createDuration(this.opt('scrollTime'));\n            var top = this.timeGrid.computeTimeTop(scrollTime.milliseconds);\n            // zoom can give weird floating-point values. rather scroll a little bit further\n            top = Math.ceil(top);\n            if (top) {\n                top++; // to overcome top border that slots beyond the first have. looks better\n            }\n            return { top: top };\n        };\n        TimeGridView.prototype.queryDateScroll = function () {\n            return { top: this.scroller.getScrollTop() };\n        };\n        TimeGridView.prototype.applyDateScroll = function (scroll) {\n            if (scroll.top !== undefined) {\n                this.scroller.setScrollTop(scroll.top);\n            }\n        };\n        // Generates an HTML attribute string for setting the width of the axis, if it is known\n        TimeGridView.prototype.axisStyleAttr = function () {\n            if (this.axisWidth != null) {\n                return 'style=\"width:' + this.axisWidth + 'px\"';\n            }\n            return '';\n        };\n        return TimeGridView;\n    }(core.View));\n    TimeGridView.prototype.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering\n\n    var SimpleTimeGrid = /** @class */ (function (_super) {\n        __extends(SimpleTimeGrid, _super);\n        function SimpleTimeGrid(context, timeGrid) {\n            var _this = _super.call(this, context, timeGrid.el) || this;\n            _this.buildDayRanges = core.memoize(buildDayRanges);\n            _this.slicer = new TimeGridSlicer();\n            _this.timeGrid = timeGrid;\n            context.calendar.registerInteractiveComponent(_this, {\n                el: _this.timeGrid.el\n            });\n            return _this;\n        }\n        SimpleTimeGrid.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            this.calendar.unregisterInteractiveComponent(this);\n        };\n        SimpleTimeGrid.prototype.render = function (props) {\n            var dateProfile = props.dateProfile, dayTable = props.dayTable;\n            var dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, this.dateEnv);\n            this.timeGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, null, this.timeGrid, dayRanges), { dateProfile: dateProfile, cells: dayTable.cells[0] }));\n        };\n        SimpleTimeGrid.prototype.renderNowIndicator = function (date) {\n            this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges), date);\n        };\n        SimpleTimeGrid.prototype.queryHit = function (positionLeft, positionTop) {\n            var rawHit = this.timeGrid.positionToHit(positionLeft, positionTop);\n            if (rawHit) {\n                return {\n                    component: this.timeGrid,\n                    dateSpan: rawHit.dateSpan,\n                    dayEl: rawHit.dayEl,\n                    rect: {\n                        left: rawHit.relativeRect.left,\n                        right: rawHit.relativeRect.right,\n                        top: rawHit.relativeRect.top,\n                        bottom: rawHit.relativeRect.bottom\n                    },\n                    layer: 0\n                };\n            }\n        };\n        return SimpleTimeGrid;\n    }(core.DateComponent));\n    function buildDayRanges(dayTable, dateProfile, dateEnv) {\n        var ranges = [];\n        for (var _i = 0, _a = dayTable.headerDates; _i < _a.length; _i++) {\n            var date = _a[_i];\n            ranges.push({\n                start: dateEnv.add(date, dateProfile.minTime),\n                end: dateEnv.add(date, dateProfile.maxTime)\n            });\n        }\n        return ranges;\n    }\n    var TimeGridSlicer = /** @class */ (function (_super) {\n        __extends(TimeGridSlicer, _super);\n        function TimeGridSlicer() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        TimeGridSlicer.prototype.sliceRange = function (range, dayRanges) {\n            var segs = [];\n            for (var col = 0; col < dayRanges.length; col++) {\n                var segRange = core.intersectRanges(range, dayRanges[col]);\n                if (segRange) {\n                    segs.push({\n                        start: segRange.start,\n                        end: segRange.end,\n                        isStart: segRange.start.valueOf() === range.start.valueOf(),\n                        isEnd: segRange.end.valueOf() === range.end.valueOf(),\n                        col: col\n                    });\n                }\n            }\n            return segs;\n        };\n        return TimeGridSlicer;\n    }(core.Slicer));\n\n    var TimeGridView$1 = /** @class */ (function (_super) {\n        __extends(TimeGridView, _super);\n        function TimeGridView(_context, viewSpec, dateProfileGenerator, parentEl) {\n            var _this = _super.call(this, _context, viewSpec, dateProfileGenerator, parentEl) || this;\n            _this.buildDayTable = core.memoize(buildDayTable);\n            if (_this.opt('columnHeader')) {\n                _this.header = new core.DayHeader(_this.context, _this.el.querySelector('.fc-head-container'));\n            }\n            _this.simpleTimeGrid = new SimpleTimeGrid(_this.context, _this.timeGrid);\n            if (_this.dayGrid) {\n                _this.simpleDayGrid = new daygrid.SimpleDayGrid(_this.context, _this.dayGrid);\n            }\n            return _this;\n        }\n        TimeGridView.prototype.destroy = function () {\n            _super.prototype.destroy.call(this);\n            if (this.header) {\n                this.header.destroy();\n            }\n            this.simpleTimeGrid.destroy();\n            if (this.simpleDayGrid) {\n                this.simpleDayGrid.destroy();\n            }\n        };\n        TimeGridView.prototype.render = function (props) {\n            _super.prototype.render.call(this, props); // for flags for updateSize\n            var dateProfile = this.props.dateProfile;\n            var dayTable = this.buildDayTable(dateProfile, this.dateProfileGenerator);\n            var splitProps = this.splitter.splitProps(props);\n            if (this.header) {\n                this.header.receiveProps({\n                    dateProfile: dateProfile,\n                    dates: dayTable.headerDates,\n                    datesRepDistinctDays: true,\n                    renderIntroHtml: this.renderHeadIntroHtml\n                });\n            }\n            this.simpleTimeGrid.receiveProps(__assign({}, splitProps['timed'], { dateProfile: dateProfile,\n                dayTable: dayTable }));\n            if (this.simpleDayGrid) {\n                this.simpleDayGrid.receiveProps(__assign({}, splitProps['allDay'], { dateProfile: dateProfile,\n                    dayTable: dayTable, nextDayThreshold: this.nextDayThreshold, isRigid: false }));\n            }\n        };\n        TimeGridView.prototype.renderNowIndicator = function (date) {\n            this.simpleTimeGrid.renderNowIndicator(date);\n        };\n        return TimeGridView;\n    }(TimeGridView));\n    function buildDayTable(dateProfile, dateProfileGenerator) {\n        var daySeries = new core.DaySeries(dateProfile.renderRange, dateProfileGenerator);\n        return new core.DayTable(daySeries, false);\n    }\n\n    var main = core.createPlugin({\n        defaultView: 'timeGridWeek',\n        views: {\n            timeGrid: {\n                class: TimeGridView$1,\n                allDaySlot: true,\n                slotDuration: '00:30:00',\n                slotEventOverlap: true // a bad name. confused with overlap/constraint system\n            },\n            timeGridDay: {\n                type: 'timeGrid',\n                duration: { days: 1 }\n            },\n            timeGridWeek: {\n                type: 'timeGrid',\n                duration: { weeks: 1 }\n            }\n        }\n    });\n\n    exports.TimeGridView = TimeGridView$1;\n    exports.AbstractTimeGridView = TimeGridView;\n    exports.buildDayTable = buildDayTable;\n    exports.buildDayRanges = buildDayRanges;\n    exports.TimeGridSlicer = TimeGridSlicer;\n    exports.default = main;\n    exports.TimeGrid = TimeGrid;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Advanced.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Advanced.vue?vue&type=style&index=0&lang=scss&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"demo-app\"},[_c('div',{staticClass:\"demo-app-top\"},[_c('button',{on:{\"click\":_vm.toggleWeekends}},[_vm._v(\"toggle weekends\")]),_c('button',{on:{\"click\":_vm.gotoPast}},[_vm._v(\"go to a date in the past\")]),_vm._v(\"\\n    (also, click a date/time to add an event)\\n  \")]),_c('FullCalendar',{ref:\"fullCalendar\",staticClass:\"demo-app-calendar\",attrs:{\"defaultView\":\"dayGridMonth\",\"header\":{\n      left: 'prev,next today',\n      center: 'title',\n      right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\n    },\"plugins\":_vm.calendarPlugins,\"weekends\":_vm.calendarWeekends,\"events\":_vm.calendarEvents,\"editable\":true,\"selectable\":true},on:{\"select\":_vm.handleSelect,\"eventClick\":_vm.handleClick}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class='demo-app'>\n    <div class='demo-app-top'>\n      <button @click=\"toggleWeekends\">toggle weekends</button>\n      <button @click=\"gotoPast\">go to a date in the past</button>\n      (also, click a date/time to add an event)\n    </div>\n    <FullCalendar\n      class='demo-app-calendar'\n      ref=\"fullCalendar\"\n      defaultView=\"dayGridMonth\"\n      :header=\"{\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\n      }\"\n      :plugins=\"calendarPlugins\"\n      :weekends=\"calendarWeekends\"\n      :events=\"calendarEvents\"\n      :editable=\"true\"\n      :selectable=\"true\"\n      @select=\"handleSelect\"\n      @eventClick=\"handleClick\"\n    />\n  </div>\n</template>\n\n<script>\nimport FullCalendar from '@fullcalendar/vue';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nexport default {\n  components: {\n    FullCalendar, // make the <FullCalendar> tag available\n  },\n  data() {\n    return {\n      calendarPlugins: [ // plugins must be defined in the JS\n        dayGridPlugin,\n        timeGridPlugin,\n        interactionPlugin, // needed for dateClick\n      ],\n      calendarWeekends: true,\n      calendarEvents: [ // initial event data\n        {\n          title: 'Event Now',\n          start: new Date(),\n          allDay: true,\n        },\n      ],\n    };\n  },\n  methods: {\n    toggleWeekends() {\n      this.calendarWeekends = !this.calendarWeekends; // update a property\n    },\n    gotoPast() {\n      const calendarApi = this.$refs.fullCalendar.getApi(); // from the ref=\"...\"\n      calendarApi.gotoDate('2000-01-01'); // call a method on the Calendar object\n    },\n    handleClick(arg) {\n      const { title } = arg.event;\n      alert(`You clicked on \"${title}\"`);\n    },\n    handleSelect(arg) {\n      const title = prompt(`Would you like to add an event to ${arg.startStr} - ${arg.endStr} ?`);\n      if (title) {\n        this.calendarEvents.push({ // add new event data\n          title,\n          start: arg.start,\n          end: arg.end,\n          allDay: arg.allDay,\n        });\n      }\n    },\n  },\n};\n\n</script>\n\n<style lang='scss'>\n\n  // you must include each plugins' css\n  // paths prefixed with ~ signify node_modules\n  @import '~@fullcalendar/core/main.css';\n  @import '~@fullcalendar/daygrid/main.css';\n  @import '~@fullcalendar/timegrid/main.css';\n\n  .demo-app {\n    font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\n    font-size: 14px;\n  }\n\n  .demo-app-top {\n    margin: 0 0 3em;\n  }\n\n  .demo-app-calendar {\n    margin: 0 auto;\n    max-width: 900px;\n  }\n\n</style>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Advanced.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Advanced.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Advanced.vue?vue&type=template&id=b6c29844&\"\nimport script from \"./Advanced.vue?vue&type=script&lang=js&\"\nexport * from \"./Advanced.vue?vue&type=script&lang=js&\"\nimport style0 from \"./Advanced.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}